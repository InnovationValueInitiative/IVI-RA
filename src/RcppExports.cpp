// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// test_ttd
Rcpp::List test_ttd(Rcpp::List x);
RcppExport SEXP _iviRA_test_ttd(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ttd(x));
    return rcpp_result_gen;
END_RCPP
}
// sim_mlogit_classC
int sim_mlogit_classC(arma::rowvec w, arma::mat delta);
RcppExport SEXP _iviRA_sim_mlogit_classC(SEXP wSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_mlogit_classC(w, delta));
    return rcpp_result_gen;
END_RCPP
}
// sim_dhaq_class_lcgm1C
double sim_dhaq_class_lcgm1C(double year, double cycle_length, arma::rowvec beta);
RcppExport SEXP _iviRA_sim_dhaq_class_lcgm1C(SEXP yearSEXP, SEXP cycle_lengthSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_dhaq_class_lcgm1C(year, cycle_length, beta));
    return rcpp_result_gen;
END_RCPP
}
// sim_dhaq_lcgm1C
double sim_dhaq_lcgm1C(double year, double cycle_length, double age, double female, double das28, arma::mat delta, arma::mat beta);
RcppExport SEXP _iviRA_sim_dhaq_lcgm1C(SEXP yearSEXP, SEXP cycle_lengthSEXP, SEXP ageSEXP, SEXP femaleSEXP, SEXP das28SEXP, SEXP deltaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type female(femaleSEXP);
    Rcpp::traits::input_parameter< double >::type das28(das28SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_dhaq_lcgm1C(year, cycle_length, age, female, das28, delta, beta));
    return rcpp_result_gen;
END_RCPP
}
// sim_tx_cost1C
double sim_tx_cost1C(int t, arma::rowvec agents_ind, std::vector<std::string> tx_name, std::vector<double> init_dose_val, std::vector<double> ann_dose_val, std::vector<double> strength_val, std::vector<double> init_num_doses, std::vector<double> ann_num_doses, std::vector<double> price, std::vector<double> infusion_cost, std::vector<int> loading_dose, std::vector<int> weight_based, double weight, double cycle_length, arma::rowvec discount);
RcppExport SEXP _iviRA_sim_tx_cost1C(SEXP tSEXP, SEXP agents_indSEXP, SEXP tx_nameSEXP, SEXP init_dose_valSEXP, SEXP ann_dose_valSEXP, SEXP strength_valSEXP, SEXP init_num_dosesSEXP, SEXP ann_num_dosesSEXP, SEXP priceSEXP, SEXP infusion_costSEXP, SEXP loading_doseSEXP, SEXP weight_basedSEXP, SEXP weightSEXP, SEXP cycle_lengthSEXP, SEXP discountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type agents_ind(agents_indSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tx_name(tx_nameSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type init_dose_val(init_dose_valSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ann_dose_val(ann_dose_valSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type strength_val(strength_valSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type init_num_doses(init_num_dosesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ann_num_doses(ann_num_dosesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type price(priceSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type infusion_cost(infusion_costSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type loading_dose(loading_doseSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type weight_based(weight_basedSEXP);
    Rcpp::traits::input_parameter< double >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type discount(discountSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_tx_cost1C(t, agents_ind, tx_name, init_dose_val, ann_dose_val, strength_val, init_num_doses, ann_num_doses, price, infusion_cost, loading_dose, weight_based, weight, cycle_length, discount));
    return rcpp_result_gen;
END_RCPP
}
// sim_utility_wailoo1C
double sim_utility_wailoo1C(double age, double disease_duration, double haq0, int male, double prev_dmards, double haq, arma::rowvec b);
RcppExport SEXP _iviRA_sim_utility_wailoo1C(SEXP ageSEXP, SEXP disease_durationSEXP, SEXP haq0SEXP, SEXP maleSEXP, SEXP prev_dmardsSEXP, SEXP haqSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type disease_duration(disease_durationSEXP);
    Rcpp::traits::input_parameter< double >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< int >::type male(maleSEXP);
    Rcpp::traits::input_parameter< double >::type prev_dmards(prev_dmardsSEXP);
    Rcpp::traits::input_parameter< double >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_utility_wailoo1C(age, disease_duration, haq0, male, prev_dmards, haq, b));
    return rcpp_result_gen;
END_RCPP
}
// sim_utility_wailooC
std::vector<double> sim_utility_wailooC(std::vector<int> sim, std::vector<int> id, std::vector<double> age, double disease_duration, std::vector<double> haq0, std::vector<int> male, std::vector<double> prev_dmards, std::vector<double> haq, std::vector<double> b_int, std::vector<double> b_age, std::vector<double> b_disease_duration, std::vector<double> b_haq0, std::vector<double> b_male, std::vector<double> b_prev_dmards, std::vector<double> b_haq);
RcppExport SEXP _iviRA_sim_utility_wailooC(SEXP simSEXP, SEXP idSEXP, SEXP ageSEXP, SEXP disease_durationSEXP, SEXP haq0SEXP, SEXP maleSEXP, SEXP prev_dmardsSEXP, SEXP haqSEXP, SEXP b_intSEXP, SEXP b_ageSEXP, SEXP b_disease_durationSEXP, SEXP b_haq0SEXP, SEXP b_maleSEXP, SEXP b_prev_dmardsSEXP, SEXP b_haqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type sim(simSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type id(idSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type disease_duration(disease_durationSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type male(maleSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type prev_dmards(prev_dmardsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_int(b_intSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_age(b_ageSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_disease_duration(b_disease_durationSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_haq0(b_haq0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_male(b_maleSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_prev_dmards(b_prev_dmardsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_haq(b_haqSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_utility_wailooC(sim, id, age, disease_duration, haq0, male, prev_dmards, haq, b_int, b_age, b_disease_duration, b_haq0, b_male, b_prev_dmards, b_haq));
    return rcpp_result_gen;
END_RCPP
}
// sim_utility_mixtureC
std::vector<double> sim_utility_mixtureC(std::vector<int> id, std::vector<int> sim, std::vector<double> haq, double pain_mean, double haq_mean, double pain_var, double haq_var, double painhaq_cor, std::vector<double> age, std::vector<int> male, arma::mat beta1, arma::mat beta2, arma::mat beta3, arma::mat beta4, std::vector<double> alpha1, std::vector<double> alpha2, std::vector<double> alpha3, std::vector<double> alpha4, std::vector<double> alpha, std::vector<double> epsilon1_sd, std::vector<double> epsilon2_sd, std::vector<double> epsilon3_sd, std::vector<double> epsilon4_sd, std::vector<double> mu_sd, arma::cube delta);
RcppExport SEXP _iviRA_sim_utility_mixtureC(SEXP idSEXP, SEXP simSEXP, SEXP haqSEXP, SEXP pain_meanSEXP, SEXP haq_meanSEXP, SEXP pain_varSEXP, SEXP haq_varSEXP, SEXP painhaq_corSEXP, SEXP ageSEXP, SEXP maleSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP beta3SEXP, SEXP beta4SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP alpha3SEXP, SEXP alpha4SEXP, SEXP alphaSEXP, SEXP epsilon1_sdSEXP, SEXP epsilon2_sdSEXP, SEXP epsilon3_sdSEXP, SEXP epsilon4_sdSEXP, SEXP mu_sdSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type id(idSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type sim(simSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< double >::type pain_mean(pain_meanSEXP);
    Rcpp::traits::input_parameter< double >::type haq_mean(haq_meanSEXP);
    Rcpp::traits::input_parameter< double >::type pain_var(pain_varSEXP);
    Rcpp::traits::input_parameter< double >::type haq_var(haq_varSEXP);
    Rcpp::traits::input_parameter< double >::type painhaq_cor(painhaq_corSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type age(ageSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type male(maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta3(beta3SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta4(beta4SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha3(alpha3SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha4(alpha4SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type epsilon1_sd(epsilon1_sdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type epsilon2_sd(epsilon2_sdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type epsilon3_sd(epsilon3_sdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type epsilon4_sd(epsilon4_sdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu_sd(mu_sdSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_utility_mixtureC(id, sim, haq, pain_mean, haq_mean, pain_var, haq_var, painhaq_cor, age, male, beta1, beta2, beta3, beta4, alpha1, alpha2, alpha3, alpha4, alpha, epsilon1_sd, epsilon2_sd, epsilon3_sd, epsilon4_sd, mu_sd, delta));
    return rcpp_result_gen;
END_RCPP
}
// sim_qalysC
std::vector<double> sim_qalysC(std::vector<double>& utility, std::vector<double>& yrlen, std::vector<int>& sim, std::vector<int>& tx, std::vector<int>& si, std::vector<double>& si_ul, arma::mat& x_attr, arma::mat& tx_attr_coef);
RcppExport SEXP _iviRA_sim_qalysC(SEXP utilitySEXP, SEXP yrlenSEXP, SEXP simSEXP, SEXP txSEXP, SEXP siSEXP, SEXP si_ulSEXP, SEXP x_attrSEXP, SEXP tx_attr_coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type utility(utilitySEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type yrlen(yrlenSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type sim(simSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type tx(txSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type si(siSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type si_ul(si_ulSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x_attr(x_attrSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type tx_attr_coef(tx_attr_coefSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_qalysC(utility, yrlen, sim, tx, si, si_ul, x_attr, tx_attr_coef));
    return rcpp_result_gen;
END_RCPP
}
// sim_dhaq6C
Rcpp::DataFrame sim_dhaq6C(int npats, int nsims, std::string hist, int line, std::vector<int> tx_inds, int nbt_ind, arma::mat x_acr, Rcpp::List nma_acr_list, arma::mat x_haq, Rcpp::List nma_haq_list, arma::cube acr2eular, arma::mat acr2haq, arma::mat eular2haq, std::vector<std::string> tx_ihaq_type);
RcppExport SEXP _iviRA_sim_dhaq6C(SEXP npatsSEXP, SEXP nsimsSEXP, SEXP histSEXP, SEXP lineSEXP, SEXP tx_indsSEXP, SEXP nbt_indSEXP, SEXP x_acrSEXP, SEXP nma_acr_listSEXP, SEXP x_haqSEXP, SEXP nma_haq_listSEXP, SEXP acr2eularSEXP, SEXP acr2haqSEXP, SEXP eular2haqSEXP, SEXP tx_ihaq_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type npats(npatsSEXP);
    Rcpp::traits::input_parameter< int >::type nsims(nsimsSEXP);
    Rcpp::traits::input_parameter< std::string >::type hist(histSEXP);
    Rcpp::traits::input_parameter< int >::type line(lineSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type tx_inds(tx_indsSEXP);
    Rcpp::traits::input_parameter< int >::type nbt_ind(nbt_indSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_acr(x_acrSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type nma_acr_list(nma_acr_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_haq(x_haqSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type nma_haq_list(nma_haq_listSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type acr2eular(acr2eularSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acr2haq(acr2haqSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eular2haq(eular2haqSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tx_ihaq_type(tx_ihaq_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_dhaq6C(npats, nsims, hist, line, tx_inds, nbt_ind, x_acr, nma_acr_list, x_haq, nma_haq_list, acr2eular, acr2haq, eular2haq, tx_ihaq_type));
    return rcpp_result_gen;
END_RCPP
}
// sim_iviRA_C
List sim_iviRA_C(arma::mat tx_inds, Rcpp::DataFrame tx_data, CharacterMatrix model_structures_mat, std::string hist, std::vector<double> haq0, std::vector<double> das28_0, std::vector<double> sdai0, std::vector<double> cdai0, std::vector<double> age0, std::vector<int> male, std::vector<int> prev_dmards, Rcpp::List nma_acr_list, arma::mat x_acr, Rcpp::List nma_haq_list, arma::mat x_haq, Rcpp::List nma_das28_list, arma::mat x_das28, arma::cube acr2eular, arma::mat acr2haq, arma::mat eular2haq, arma::mat acr2das28, arma::mat acr2sdai, arma::mat acr2cdai, arma::mat tswitch_da, arma::mat haq_lprog_therapy, arma::mat haq_lprog_age, arma::cube haq_lcgm_delta, arma::cube haq_lcgm_beta, std::vector<double> rebound_factor, arma::mat lifetable_male, arma::mat lifetable_female, arma::mat x_mort, arma::mat logor_mort, arma::mat x_ttd_all, arma::mat x_ttd_da, arma::mat x_ttd_eular, Rcpp::List ttd_all_list, Rcpp::List ttd_da_list, Rcpp::List ttd_eular_mod_list, Rcpp::List ttd_eular_good_list, int cdmards, int nbt, arma::mat si_loc, arma::mat si_anc1, arma::mat si_anc2, std::string si_dist, arma::mat haqdelta_loghr, int max_months, arma::mat hosp_days, arma::mat cost_pday, std::vector<double> mgmt_cost, std::vector<double> si_cost, std::vector<double> prod_loss, Rcpp::List tc_list, std::vector<double> weight, arma::mat coefs_wailoo, Rcpp::List pars_util_mix, std::vector<double> si_ul, Rcpp::List utility_tx_attr, Rcpp::List discount_rate, std::string output);
RcppExport SEXP _iviRA_sim_iviRA_C(SEXP tx_indsSEXP, SEXP tx_dataSEXP, SEXP model_structures_matSEXP, SEXP histSEXP, SEXP haq0SEXP, SEXP das28_0SEXP, SEXP sdai0SEXP, SEXP cdai0SEXP, SEXP age0SEXP, SEXP maleSEXP, SEXP prev_dmardsSEXP, SEXP nma_acr_listSEXP, SEXP x_acrSEXP, SEXP nma_haq_listSEXP, SEXP x_haqSEXP, SEXP nma_das28_listSEXP, SEXP x_das28SEXP, SEXP acr2eularSEXP, SEXP acr2haqSEXP, SEXP eular2haqSEXP, SEXP acr2das28SEXP, SEXP acr2sdaiSEXP, SEXP acr2cdaiSEXP, SEXP tswitch_daSEXP, SEXP haq_lprog_therapySEXP, SEXP haq_lprog_ageSEXP, SEXP haq_lcgm_deltaSEXP, SEXP haq_lcgm_betaSEXP, SEXP rebound_factorSEXP, SEXP lifetable_maleSEXP, SEXP lifetable_femaleSEXP, SEXP x_mortSEXP, SEXP logor_mortSEXP, SEXP x_ttd_allSEXP, SEXP x_ttd_daSEXP, SEXP x_ttd_eularSEXP, SEXP ttd_all_listSEXP, SEXP ttd_da_listSEXP, SEXP ttd_eular_mod_listSEXP, SEXP ttd_eular_good_listSEXP, SEXP cdmardsSEXP, SEXP nbtSEXP, SEXP si_locSEXP, SEXP si_anc1SEXP, SEXP si_anc2SEXP, SEXP si_distSEXP, SEXP haqdelta_loghrSEXP, SEXP max_monthsSEXP, SEXP hosp_daysSEXP, SEXP cost_pdaySEXP, SEXP mgmt_costSEXP, SEXP si_costSEXP, SEXP prod_lossSEXP, SEXP tc_listSEXP, SEXP weightSEXP, SEXP coefs_wailooSEXP, SEXP pars_util_mixSEXP, SEXP si_ulSEXP, SEXP utility_tx_attrSEXP, SEXP discount_rateSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type tx_inds(tx_indsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type tx_data(tx_dataSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix >::type model_structures_mat(model_structures_matSEXP);
    Rcpp::traits::input_parameter< std::string >::type hist(histSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type das28_0(das28_0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sdai0(sdai0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cdai0(cdai0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type age0(age0SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type male(maleSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type prev_dmards(prev_dmardsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type nma_acr_list(nma_acr_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_acr(x_acrSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type nma_haq_list(nma_haq_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_haq(x_haqSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type nma_das28_list(nma_das28_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_das28(x_das28SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type acr2eular(acr2eularSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acr2haq(acr2haqSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eular2haq(eular2haqSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acr2das28(acr2das28SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acr2sdai(acr2sdaiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acr2cdai(acr2cdaiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tswitch_da(tswitch_daSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type haq_lprog_therapy(haq_lprog_therapySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type haq_lprog_age(haq_lprog_ageSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type haq_lcgm_delta(haq_lcgm_deltaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type haq_lcgm_beta(haq_lcgm_betaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rebound_factor(rebound_factorSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_male(lifetable_maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_female(lifetable_femaleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_mort(x_mortSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type logor_mort(logor_mortSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_ttd_all(x_ttd_allSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_ttd_da(x_ttd_daSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_ttd_eular(x_ttd_eularSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ttd_all_list(ttd_all_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ttd_da_list(ttd_da_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ttd_eular_mod_list(ttd_eular_mod_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ttd_eular_good_list(ttd_eular_good_listSEXP);
    Rcpp::traits::input_parameter< int >::type cdmards(cdmardsSEXP);
    Rcpp::traits::input_parameter< int >::type nbt(nbtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type si_loc(si_locSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type si_anc1(si_anc1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type si_anc2(si_anc2SEXP);
    Rcpp::traits::input_parameter< std::string >::type si_dist(si_distSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type haqdelta_loghr(haqdelta_loghrSEXP);
    Rcpp::traits::input_parameter< int >::type max_months(max_monthsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hosp_days(hosp_daysSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cost_pday(cost_pdaySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mgmt_cost(mgmt_costSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type si_cost(si_costSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type prod_loss(prod_lossSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tc_list(tc_listSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coefs_wailoo(coefs_wailooSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type pars_util_mix(pars_util_mixSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type si_ul(si_ulSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type utility_tx_attr(utility_tx_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discount_rate(discount_rateSEXP);
    Rcpp::traits::input_parameter< std::string >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_iviRA_C(tx_inds, tx_data, model_structures_mat, hist, haq0, das28_0, sdai0, cdai0, age0, male, prev_dmards, nma_acr_list, x_acr, nma_haq_list, x_haq, nma_das28_list, x_das28, acr2eular, acr2haq, eular2haq, acr2das28, acr2sdai, acr2cdai, tswitch_da, haq_lprog_therapy, haq_lprog_age, haq_lcgm_delta, haq_lcgm_beta, rebound_factor, lifetable_male, lifetable_female, x_mort, logor_mort, x_ttd_all, x_ttd_da, x_ttd_eular, ttd_all_list, ttd_da_list, ttd_eular_mod_list, ttd_eular_good_list, cdmards, nbt, si_loc, si_anc1, si_anc2, si_dist, haqdelta_loghr, max_months, hosp_days, cost_pday, mgmt_cost, si_cost, prod_loss, tc_list, weight, coefs_wailoo, pars_util_mix, si_ul, utility_tx_attr, discount_rate, output));
    return rcpp_result_gen;
END_RCPP
}
// mlogit_probC
arma::rowvec mlogit_probC(arma::rowvec x, arma::mat beta);
RcppExport SEXP _iviRA_mlogit_probC(SEXP xSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mlogit_probC(x, beta));
    return rcpp_result_gen;
END_RCPP
}
// newprobC
double newprobC(arma::rowvec x, arma::rowvec logor, double logit_baseprob);
RcppExport SEXP _iviRA_newprobC(SEXP xSEXP, SEXP logorSEXP, SEXP logit_baseprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type logor(logorSEXP);
    Rcpp::traits::input_parameter< double >::type logit_baseprob(logit_baseprobSEXP);
    rcpp_result_gen = Rcpp::wrap(newprobC(x, logor, logit_baseprob));
    return rcpp_result_gen;
END_RCPP
}
// mortprobC
double mortprobC(int age, int male, arma::mat lifetable_male, arma::mat lifetable_female, arma::rowvec x, arma::rowvec logor, double haq0, double haq, double cycle_length, double month, arma::rowvec loghr_vec);
RcppExport SEXP _iviRA_mortprobC(SEXP ageSEXP, SEXP maleSEXP, SEXP lifetable_maleSEXP, SEXP lifetable_femaleSEXP, SEXP xSEXP, SEXP logorSEXP, SEXP haq0SEXP, SEXP haqSEXP, SEXP cycle_lengthSEXP, SEXP monthSEXP, SEXP loghr_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< int >::type male(maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_male(lifetable_maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_female(lifetable_femaleSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type logor(logorSEXP);
    Rcpp::traits::input_parameter< double >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< double >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type month(monthSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loghr_vec(loghr_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(mortprobC(age, male, lifetable_male, lifetable_female, x, logor, haq0, haq, cycle_length, month, loghr_vec));
    return rcpp_result_gen;
END_RCPP
}
// sample_deathC
int sample_deathC(int age, int male, arma::mat lifetable_male, arma::mat lifetable_female, arma::rowvec x, arma::rowvec logor, double haq0, double haq, double cycle_length, double month, arma::rowvec loghr_vec);
RcppExport SEXP _iviRA_sample_deathC(SEXP ageSEXP, SEXP maleSEXP, SEXP lifetable_maleSEXP, SEXP lifetable_femaleSEXP, SEXP xSEXP, SEXP logorSEXP, SEXP haq0SEXP, SEXP haqSEXP, SEXP cycle_lengthSEXP, SEXP monthSEXP, SEXP loghr_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< int >::type male(maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_male(lifetable_maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_female(lifetable_femaleSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type logor(logorSEXP);
    Rcpp::traits::input_parameter< double >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< double >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type month(monthSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loghr_vec(loghr_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_deathC(age, male, lifetable_male, lifetable_female, x, logor, haq0, haq, cycle_length, month, loghr_vec));
    return rcpp_result_gen;
END_RCPP
}
// sample_survC
std::vector<double> sample_survC(int n, double age0, double male, arma::mat lifetable_male, arma::mat lifetable_female, arma::rowvec x, arma::rowvec logor, double haq0, std::vector<double> haq, double cycle_length, arma::rowvec loghr_vec);
RcppExport SEXP _iviRA_sample_survC(SEXP nSEXP, SEXP age0SEXP, SEXP maleSEXP, SEXP lifetable_maleSEXP, SEXP lifetable_femaleSEXP, SEXP xSEXP, SEXP logorSEXP, SEXP haq0SEXP, SEXP haqSEXP, SEXP cycle_lengthSEXP, SEXP loghr_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type age0(age0SEXP);
    Rcpp::traits::input_parameter< double >::type male(maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_male(lifetable_maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_female(lifetable_femaleSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type logor(logorSEXP);
    Rcpp::traits::input_parameter< double >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loghr_vec(loghr_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_survC(n, age0, male, lifetable_male, lifetable_female, x, logor, haq0, haq, cycle_length, loghr_vec));
    return rcpp_result_gen;
END_RCPP
}
// rsurvC
double rsurvC(double location, double anc1, std::string dist, double anc2);
RcppExport SEXP _iviRA_rsurvC(SEXP locationSEXP, SEXP anc1SEXP, SEXP distSEXP, SEXP anc2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type location(locationSEXP);
    Rcpp::traits::input_parameter< double >::type anc1(anc1SEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type anc2(anc2SEXP);
    rcpp_result_gen = Rcpp::wrap(rsurvC(location, anc1, dist, anc2));
    return rcpp_result_gen;
END_RCPP
}
// sim_acr_test
int sim_acr_test();
RcppExport SEXP _iviRA_sim_acr_test() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(sim_acr_test());
    return rcpp_result_gen;
END_RCPP
}
// sim_lm_test
int sim_lm_test();
RcppExport SEXP _iviRA_sim_lm_test() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(sim_lm_test());
    return rcpp_result_gen;
END_RCPP
}
// ttd_da_test
arma::rowvec ttd_da_test(int da_cat);
RcppExport SEXP _iviRA_ttd_da_test(SEXP da_catSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type da_cat(da_catSEXP);
    rcpp_result_gen = Rcpp::wrap(ttd_da_test(da_cat));
    return rcpp_result_gen;
END_RCPP
}
// arma_rowvec_anyNA
bool arma_rowvec_anyNA(arma::rowvec x);
RcppExport SEXP _iviRA_arma_rowvec_anyNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_rowvec_anyNA(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_iviRA_test_ttd", (DL_FUNC) &_iviRA_test_ttd, 1},
    {"_iviRA_sim_mlogit_classC", (DL_FUNC) &_iviRA_sim_mlogit_classC, 2},
    {"_iviRA_sim_dhaq_class_lcgm1C", (DL_FUNC) &_iviRA_sim_dhaq_class_lcgm1C, 3},
    {"_iviRA_sim_dhaq_lcgm1C", (DL_FUNC) &_iviRA_sim_dhaq_lcgm1C, 7},
    {"_iviRA_sim_tx_cost1C", (DL_FUNC) &_iviRA_sim_tx_cost1C, 15},
    {"_iviRA_sim_utility_wailoo1C", (DL_FUNC) &_iviRA_sim_utility_wailoo1C, 7},
    {"_iviRA_sim_utility_wailooC", (DL_FUNC) &_iviRA_sim_utility_wailooC, 15},
    {"_iviRA_sim_utility_mixtureC", (DL_FUNC) &_iviRA_sim_utility_mixtureC, 25},
    {"_iviRA_sim_qalysC", (DL_FUNC) &_iviRA_sim_qalysC, 8},
    {"_iviRA_sim_dhaq6C", (DL_FUNC) &_iviRA_sim_dhaq6C, 14},
    {"_iviRA_sim_iviRA_C", (DL_FUNC) &_iviRA_sim_iviRA_C, 61},
    {"_iviRA_mlogit_probC", (DL_FUNC) &_iviRA_mlogit_probC, 2},
    {"_iviRA_newprobC", (DL_FUNC) &_iviRA_newprobC, 3},
    {"_iviRA_mortprobC", (DL_FUNC) &_iviRA_mortprobC, 11},
    {"_iviRA_sample_deathC", (DL_FUNC) &_iviRA_sample_deathC, 11},
    {"_iviRA_sample_survC", (DL_FUNC) &_iviRA_sample_survC, 11},
    {"_iviRA_rsurvC", (DL_FUNC) &_iviRA_rsurvC, 4},
    {"_iviRA_sim_acr_test", (DL_FUNC) &_iviRA_sim_acr_test, 0},
    {"_iviRA_sim_lm_test", (DL_FUNC) &_iviRA_sim_lm_test, 0},
    {"_iviRA_ttd_da_test", (DL_FUNC) &_iviRA_ttd_da_test, 1},
    {"_iviRA_arma_rowvec_anyNA", (DL_FUNC) &_iviRA_arma_rowvec_anyNA, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_iviRA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
