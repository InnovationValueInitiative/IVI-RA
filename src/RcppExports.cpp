// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// test_itreat_haq
List test_itreat_haq(std::string itreat_haq_model, int line, int therapy, int nbt, arma::rowvec nma_acr1, arma::rowvec nma_acr2, double nma_dhaq1, double nma_dhaq2, arma::mat acr2eular, arma::rowvec acr2haq, arma::rowvec eular2haq);
RcppExport SEXP iviRA_test_itreat_haq(SEXP itreat_haq_modelSEXP, SEXP lineSEXP, SEXP therapySEXP, SEXP nbtSEXP, SEXP nma_acr1SEXP, SEXP nma_acr2SEXP, SEXP nma_dhaq1SEXP, SEXP nma_dhaq2SEXP, SEXP acr2eularSEXP, SEXP acr2haqSEXP, SEXP eular2haqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type itreat_haq_model(itreat_haq_modelSEXP);
    Rcpp::traits::input_parameter< int >::type line(lineSEXP);
    Rcpp::traits::input_parameter< int >::type therapy(therapySEXP);
    Rcpp::traits::input_parameter< int >::type nbt(nbtSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type nma_acr1(nma_acr1SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type nma_acr2(nma_acr2SEXP);
    Rcpp::traits::input_parameter< double >::type nma_dhaq1(nma_dhaq1SEXP);
    Rcpp::traits::input_parameter< double >::type nma_dhaq2(nma_dhaq2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acr2eular(acr2eularSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type acr2haq(acr2haqSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type eular2haq(eular2haqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_itreat_haq(itreat_haq_model, line, therapy, nbt, nma_acr1, nma_acr2, nma_dhaq1, nma_dhaq2, acr2eular, acr2haq, eular2haq));
    return rcpp_result_gen;
END_RCPP
}
// get_das28_cat
int get_das28_cat(double das28);
RcppExport SEXP iviRA_get_das28_cat(SEXP das28SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type das28(das28SEXP);
    rcpp_result_gen = Rcpp::wrap(get_das28_cat(das28));
    return rcpp_result_gen;
END_RCPP
}
// get_sdai_cat
int get_sdai_cat(double sdai);
RcppExport SEXP iviRA_get_sdai_cat(SEXP sdaiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sdai(sdaiSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sdai_cat(sdai));
    return rcpp_result_gen;
END_RCPP
}
// get_cdai_cat
int get_cdai_cat(double cdai);
RcppExport SEXP iviRA_get_cdai_cat(SEXP cdaiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cdai(cdaiSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cdai_cat(cdai));
    return rcpp_result_gen;
END_RCPP
}
// test_itreat_switch
List test_itreat_switch(std::string itreat_switch_model, int line, int therapy, int nbt, int acr, int eular, double das28, double sdai, double cdai, arma::rowvec acr2das28, arma::rowvec acr2sdai, arma::rowvec acr2cdai, arma::rowvec nma_das28_1, arma::rowvec nma_das28_2, arma::rowvec p);
RcppExport SEXP iviRA_test_itreat_switch(SEXP itreat_switch_modelSEXP, SEXP lineSEXP, SEXP therapySEXP, SEXP nbtSEXP, SEXP acrSEXP, SEXP eularSEXP, SEXP das28SEXP, SEXP sdaiSEXP, SEXP cdaiSEXP, SEXP acr2das28SEXP, SEXP acr2sdaiSEXP, SEXP acr2cdaiSEXP, SEXP nma_das28_1SEXP, SEXP nma_das28_2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type itreat_switch_model(itreat_switch_modelSEXP);
    Rcpp::traits::input_parameter< int >::type line(lineSEXP);
    Rcpp::traits::input_parameter< int >::type therapy(therapySEXP);
    Rcpp::traits::input_parameter< int >::type nbt(nbtSEXP);
    Rcpp::traits::input_parameter< int >::type acr(acrSEXP);
    Rcpp::traits::input_parameter< int >::type eular(eularSEXP);
    Rcpp::traits::input_parameter< double >::type das28(das28SEXP);
    Rcpp::traits::input_parameter< double >::type sdai(sdaiSEXP);
    Rcpp::traits::input_parameter< double >::type cdai(cdaiSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type acr2das28(acr2das28SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type acr2sdai(acr2sdaiSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type acr2cdai(acr2cdaiSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type nma_das28_1(nma_das28_1SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type nma_das28_2(nma_das28_2SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(test_itreat_switch(itreat_switch_model, line, therapy, nbt, acr, eular, das28, sdai, cdai, acr2das28, acr2sdai, acr2cdai, nma_das28_1, nma_das28_2, p));
    return rcpp_result_gen;
END_RCPP
}
// sim_ttd_eular
double sim_ttd_eular(arma::rowvec x, arma::rowvec loc_mod, double anc1_mod, arma::rowvec loc_good, double anc1_good, int eular, std::string dist, double cycle_length, double ttsi, double anc2_mod, double anc2_good);
RcppExport SEXP iviRA_sim_ttd_eular(SEXP xSEXP, SEXP loc_modSEXP, SEXP anc1_modSEXP, SEXP loc_goodSEXP, SEXP anc1_goodSEXP, SEXP eularSEXP, SEXP distSEXP, SEXP cycle_lengthSEXP, SEXP ttsiSEXP, SEXP anc2_modSEXP, SEXP anc2_goodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loc_mod(loc_modSEXP);
    Rcpp::traits::input_parameter< double >::type anc1_mod(anc1_modSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loc_good(loc_goodSEXP);
    Rcpp::traits::input_parameter< double >::type anc1_good(anc1_goodSEXP);
    Rcpp::traits::input_parameter< int >::type eular(eularSEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type ttsi(ttsiSEXP);
    Rcpp::traits::input_parameter< double >::type anc2_mod(anc2_modSEXP);
    Rcpp::traits::input_parameter< double >::type anc2_good(anc2_goodSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_ttd_eular(x, loc_mod, anc1_mod, loc_good, anc1_good, eular, dist, cycle_length, ttsi, anc2_mod, anc2_good));
    return rcpp_result_gen;
END_RCPP
}
// sim_ttd_da
double sim_ttd_da(arma::rowvec x, arma::rowvec loc_rem, double anc1_rem, arma::rowvec loc_low, double anc1_low, arma::rowvec loc_mod, double anc1_mod, int da_cat, int tswitch, std::string dist, double cycle_length, double ttsi, double anc2_rem, double anc2_low, double anc2_mod);
RcppExport SEXP iviRA_sim_ttd_da(SEXP xSEXP, SEXP loc_remSEXP, SEXP anc1_remSEXP, SEXP loc_lowSEXP, SEXP anc1_lowSEXP, SEXP loc_modSEXP, SEXP anc1_modSEXP, SEXP da_catSEXP, SEXP tswitchSEXP, SEXP distSEXP, SEXP cycle_lengthSEXP, SEXP ttsiSEXP, SEXP anc2_remSEXP, SEXP anc2_lowSEXP, SEXP anc2_modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loc_rem(loc_remSEXP);
    Rcpp::traits::input_parameter< double >::type anc1_rem(anc1_remSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loc_low(loc_lowSEXP);
    Rcpp::traits::input_parameter< double >::type anc1_low(anc1_lowSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loc_mod(loc_modSEXP);
    Rcpp::traits::input_parameter< double >::type anc1_mod(anc1_modSEXP);
    Rcpp::traits::input_parameter< int >::type da_cat(da_catSEXP);
    Rcpp::traits::input_parameter< int >::type tswitch(tswitchSEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type ttsi(ttsiSEXP);
    Rcpp::traits::input_parameter< double >::type anc2_rem(anc2_remSEXP);
    Rcpp::traits::input_parameter< double >::type anc2_low(anc2_lowSEXP);
    Rcpp::traits::input_parameter< double >::type anc2_mod(anc2_modSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_ttd_da(x, loc_rem, anc1_rem, loc_low, anc1_low, loc_mod, anc1_mod, da_cat, tswitch, dist, cycle_length, ttsi, anc2_rem, anc2_low, anc2_mod));
    return rcpp_result_gen;
END_RCPP
}
// sim_mlogit_classC
int sim_mlogit_classC(arma::rowvec w, arma::mat delta);
RcppExport SEXP iviRA_sim_mlogit_classC(SEXP wSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_mlogit_classC(w, delta));
    return rcpp_result_gen;
END_RCPP
}
// sim_dhaq_class_lcgm1C
double sim_dhaq_class_lcgm1C(double year, double cycle_length, arma::rowvec beta);
RcppExport SEXP iviRA_sim_dhaq_class_lcgm1C(SEXP yearSEXP, SEXP cycle_lengthSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_dhaq_class_lcgm1C(year, cycle_length, beta));
    return rcpp_result_gen;
END_RCPP
}
// sim_dhaq_lcgm1C
double sim_dhaq_lcgm1C(double year, double cycle_length, double age, double female, double das28, arma::mat delta, arma::mat beta);
RcppExport SEXP iviRA_sim_dhaq_lcgm1C(SEXP yearSEXP, SEXP cycle_lengthSEXP, SEXP ageSEXP, SEXP femaleSEXP, SEXP das28SEXP, SEXP deltaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type female(femaleSEXP);
    Rcpp::traits::input_parameter< double >::type das28(das28SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_dhaq_lcgm1C(year, cycle_length, age, female, das28, delta, beta));
    return rcpp_result_gen;
END_RCPP
}
// sim_haqC
List sim_haqC(arma::mat therapies, std::vector<double> haq0, std::vector<double> das28_0, std::vector<double> sdai0, std::vector<double> cdai0, std::vector<double> age0, std::vector<int> male, std::vector<int> prev_dmards, std::string itreat_haq_model, std::string itreat_switch_model, arma::cube nma_acr1, arma::cube nma_acr2, arma::mat nma_dhaq1, arma::mat nma_dhaq2, arma::mat nma_das28_1, arma::mat nma_das28_2, arma::cube acr2eular, arma::mat acr2haq, arma::mat eular2haq, arma::mat acr2das28, arma::mat acr2sdai, arma::mat acr2cdai, arma::mat tswitch_da, arma::mat haq_lprog_therapy, arma::mat haq_lprog_age, arma::cube haq_lcgm_delta, arma::cube haq_lcgm_beta, std::string cdmards_haq_model, std::vector<double> rebound_factor, arma::mat lifetable_male, arma::mat lifetable_female, arma::mat x_mort, arma::mat logor, std::string dur_dist, arma::mat x_dur, arma::mat ttd_da_loc_rem, arma::vec ttd_da_anc1_rem, arma::vec ttd_da_anc2_rem, arma::mat ttd_da_loc_low, arma::vec ttd_da_anc1_low, arma::vec ttd_da_anc2_low, arma::mat ttd_da_loc_mod, arma::vec ttd_da_anc1_mod, arma::vec ttd_da_anc2_mod, arma::mat ttd_eular_loc_mod, arma::vec ttd_eular_anc1_mod, arma::vec ttd_eular_anc2_mod, arma::mat ttd_eular_loc_good, arma::vec ttd_eular_anc1_good, arma::vec ttd_eular_anc2_good, double cycle_length, int treat_gap, int cdmards, int nbt, arma::mat si_loc, arma::mat si_anc1, arma::mat si_anc2, std::string si_dist, arma::mat haqdelta_loghr, int max_months);
RcppExport SEXP iviRA_sim_haqC(SEXP therapiesSEXP, SEXP haq0SEXP, SEXP das28_0SEXP, SEXP sdai0SEXP, SEXP cdai0SEXP, SEXP age0SEXP, SEXP maleSEXP, SEXP prev_dmardsSEXP, SEXP itreat_haq_modelSEXP, SEXP itreat_switch_modelSEXP, SEXP nma_acr1SEXP, SEXP nma_acr2SEXP, SEXP nma_dhaq1SEXP, SEXP nma_dhaq2SEXP, SEXP nma_das28_1SEXP, SEXP nma_das28_2SEXP, SEXP acr2eularSEXP, SEXP acr2haqSEXP, SEXP eular2haqSEXP, SEXP acr2das28SEXP, SEXP acr2sdaiSEXP, SEXP acr2cdaiSEXP, SEXP tswitch_daSEXP, SEXP haq_lprog_therapySEXP, SEXP haq_lprog_ageSEXP, SEXP haq_lcgm_deltaSEXP, SEXP haq_lcgm_betaSEXP, SEXP cdmards_haq_modelSEXP, SEXP rebound_factorSEXP, SEXP lifetable_maleSEXP, SEXP lifetable_femaleSEXP, SEXP x_mortSEXP, SEXP logorSEXP, SEXP dur_distSEXP, SEXP x_durSEXP, SEXP ttd_da_loc_remSEXP, SEXP ttd_da_anc1_remSEXP, SEXP ttd_da_anc2_remSEXP, SEXP ttd_da_loc_lowSEXP, SEXP ttd_da_anc1_lowSEXP, SEXP ttd_da_anc2_lowSEXP, SEXP ttd_da_loc_modSEXP, SEXP ttd_da_anc1_modSEXP, SEXP ttd_da_anc2_modSEXP, SEXP ttd_eular_loc_modSEXP, SEXP ttd_eular_anc1_modSEXP, SEXP ttd_eular_anc2_modSEXP, SEXP ttd_eular_loc_goodSEXP, SEXP ttd_eular_anc1_goodSEXP, SEXP ttd_eular_anc2_goodSEXP, SEXP cycle_lengthSEXP, SEXP treat_gapSEXP, SEXP cdmardsSEXP, SEXP nbtSEXP, SEXP si_locSEXP, SEXP si_anc1SEXP, SEXP si_anc2SEXP, SEXP si_distSEXP, SEXP haqdelta_loghrSEXP, SEXP max_monthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type therapies(therapiesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type das28_0(das28_0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sdai0(sdai0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cdai0(cdai0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type age0(age0SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type male(maleSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type prev_dmards(prev_dmardsSEXP);
    Rcpp::traits::input_parameter< std::string >::type itreat_haq_model(itreat_haq_modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type itreat_switch_model(itreat_switch_modelSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type nma_acr1(nma_acr1SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type nma_acr2(nma_acr2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nma_dhaq1(nma_dhaq1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nma_dhaq2(nma_dhaq2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nma_das28_1(nma_das28_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nma_das28_2(nma_das28_2SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type acr2eular(acr2eularSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acr2haq(acr2haqSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eular2haq(eular2haqSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acr2das28(acr2das28SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acr2sdai(acr2sdaiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acr2cdai(acr2cdaiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tswitch_da(tswitch_daSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type haq_lprog_therapy(haq_lprog_therapySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type haq_lprog_age(haq_lprog_ageSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type haq_lcgm_delta(haq_lcgm_deltaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type haq_lcgm_beta(haq_lcgm_betaSEXP);
    Rcpp::traits::input_parameter< std::string >::type cdmards_haq_model(cdmards_haq_modelSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rebound_factor(rebound_factorSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_male(lifetable_maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_female(lifetable_femaleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_mort(x_mortSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type logor(logorSEXP);
    Rcpp::traits::input_parameter< std::string >::type dur_dist(dur_distSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_dur(x_durSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ttd_da_loc_rem(ttd_da_loc_remSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ttd_da_anc1_rem(ttd_da_anc1_remSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ttd_da_anc2_rem(ttd_da_anc2_remSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ttd_da_loc_low(ttd_da_loc_lowSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ttd_da_anc1_low(ttd_da_anc1_lowSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ttd_da_anc2_low(ttd_da_anc2_lowSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ttd_da_loc_mod(ttd_da_loc_modSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ttd_da_anc1_mod(ttd_da_anc1_modSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ttd_da_anc2_mod(ttd_da_anc2_modSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ttd_eular_loc_mod(ttd_eular_loc_modSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ttd_eular_anc1_mod(ttd_eular_anc1_modSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ttd_eular_anc2_mod(ttd_eular_anc2_modSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ttd_eular_loc_good(ttd_eular_loc_goodSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ttd_eular_anc1_good(ttd_eular_anc1_goodSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ttd_eular_anc2_good(ttd_eular_anc2_goodSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type treat_gap(treat_gapSEXP);
    Rcpp::traits::input_parameter< int >::type cdmards(cdmardsSEXP);
    Rcpp::traits::input_parameter< int >::type nbt(nbtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type si_loc(si_locSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type si_anc1(si_anc1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type si_anc2(si_anc2SEXP);
    Rcpp::traits::input_parameter< std::string >::type si_dist(si_distSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type haqdelta_loghr(haqdelta_loghrSEXP);
    Rcpp::traits::input_parameter< int >::type max_months(max_monthsSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_haqC(therapies, haq0, das28_0, sdai0, cdai0, age0, male, prev_dmards, itreat_haq_model, itreat_switch_model, nma_acr1, nma_acr2, nma_dhaq1, nma_dhaq2, nma_das28_1, nma_das28_2, acr2eular, acr2haq, eular2haq, acr2das28, acr2sdai, acr2cdai, tswitch_da, haq_lprog_therapy, haq_lprog_age, haq_lcgm_delta, haq_lcgm_beta, cdmards_haq_model, rebound_factor, lifetable_male, lifetable_female, x_mort, logor, dur_dist, x_dur, ttd_da_loc_rem, ttd_da_anc1_rem, ttd_da_anc2_rem, ttd_da_loc_low, ttd_da_anc1_low, ttd_da_anc2_low, ttd_da_loc_mod, ttd_da_anc1_mod, ttd_da_anc2_mod, ttd_eular_loc_mod, ttd_eular_anc1_mod, ttd_eular_anc2_mod, ttd_eular_loc_good, ttd_eular_anc1_good, ttd_eular_anc2_good, cycle_length, treat_gap, cdmards, nbt, si_loc, si_anc1, si_anc2, si_dist, haqdelta_loghr, max_months));
    return rcpp_result_gen;
END_RCPP
}
// sim_utility_mixture1C
double sim_utility_mixture1C(arma::rowvec beta1, arma::rowvec beta2, arma::rowvec beta3, arma::rowvec beta4, double alpha1, double alpha2, double alpha3, double alpha4, double alpha, double epsilon1_sd, double& epsilon2_sd, double epsilon3_sd, double& epsilon4_sd, double mu, arma::mat delta, arma::rowvec w, arma::rowvec x, int male);
RcppExport SEXP iviRA_sim_utility_mixture1C(SEXP beta1SEXP, SEXP beta2SEXP, SEXP beta3SEXP, SEXP beta4SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP alpha3SEXP, SEXP alpha4SEXP, SEXP alphaSEXP, SEXP epsilon1_sdSEXP, SEXP epsilon2_sdSEXP, SEXP epsilon3_sdSEXP, SEXP epsilon4_sdSEXP, SEXP muSEXP, SEXP deltaSEXP, SEXP wSEXP, SEXP xSEXP, SEXP maleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type beta3(beta3SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type beta4(beta4SEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha3(alpha3SEXP);
    Rcpp::traits::input_parameter< double >::type alpha4(alpha4SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon1_sd(epsilon1_sdSEXP);
    Rcpp::traits::input_parameter< double& >::type epsilon2_sd(epsilon2_sdSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon3_sd(epsilon3_sdSEXP);
    Rcpp::traits::input_parameter< double& >::type epsilon4_sd(epsilon4_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type male(maleSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_utility_mixture1C(beta1, beta2, beta3, beta4, alpha1, alpha2, alpha3, alpha4, alpha, epsilon1_sd, epsilon2_sd, epsilon3_sd, epsilon4_sd, mu, delta, w, x, male));
    return rcpp_result_gen;
END_RCPP
}
// sim_utility_mixtureC
List sim_utility_mixtureC(std::vector<int> id, std::vector<int> sim, std::vector<double> haq, double pain_mean, double haq_mean, double pain_var, double haq_var, double painhaq_cor, std::vector<double> age, std::vector<double> male, arma::mat beta1, arma::mat beta2, arma::mat beta3, arma::mat beta4, std::vector<double> alpha1, std::vector<double> alpha2, std::vector<double> alpha3, std::vector<double> alpha4, std::vector<double> alpha, std::vector<double> epsilon1_sd, std::vector<double> epsilon2_sd, std::vector<double> epsilon3_sd, std::vector<double> epsilon4_sd, std::vector<double> mu_sd, arma::cube delta);
RcppExport SEXP iviRA_sim_utility_mixtureC(SEXP idSEXP, SEXP simSEXP, SEXP haqSEXP, SEXP pain_meanSEXP, SEXP haq_meanSEXP, SEXP pain_varSEXP, SEXP haq_varSEXP, SEXP painhaq_corSEXP, SEXP ageSEXP, SEXP maleSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP beta3SEXP, SEXP beta4SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP alpha3SEXP, SEXP alpha4SEXP, SEXP alphaSEXP, SEXP epsilon1_sdSEXP, SEXP epsilon2_sdSEXP, SEXP epsilon3_sdSEXP, SEXP epsilon4_sdSEXP, SEXP mu_sdSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type id(idSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type sim(simSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< double >::type pain_mean(pain_meanSEXP);
    Rcpp::traits::input_parameter< double >::type haq_mean(haq_meanSEXP);
    Rcpp::traits::input_parameter< double >::type pain_var(pain_varSEXP);
    Rcpp::traits::input_parameter< double >::type haq_var(haq_varSEXP);
    Rcpp::traits::input_parameter< double >::type painhaq_cor(painhaq_corSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type age(ageSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type male(maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta3(beta3SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta4(beta4SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha3(alpha3SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha4(alpha4SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type epsilon1_sd(epsilon1_sdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type epsilon2_sd(epsilon2_sdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type epsilon3_sd(epsilon3_sdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type epsilon4_sd(epsilon4_sdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu_sd(mu_sdSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_utility_mixtureC(id, sim, haq, pain_mean, haq_mean, pain_var, haq_var, painhaq_cor, age, male, beta1, beta2, beta3, beta4, alpha1, alpha2, alpha3, alpha4, alpha, epsilon1_sd, epsilon2_sd, epsilon3_sd, epsilon4_sd, mu_sd, delta));
    return rcpp_result_gen;
END_RCPP
}
// sim_utility_wailooC
std::vector<double> sim_utility_wailooC(std::vector<int> sim, std::vector<int> id, std::vector<double> age, double disease_duration, std::vector<double> haq0, std::vector<double> male, std::vector<double> prev_dmards, std::vector<double> haq, std::vector<double> b_int, std::vector<double> b_age, std::vector<double> b_disease_duration, std::vector<double> b_haq0, std::vector<double> b_male, std::vector<double> b_prev_dmards, std::vector<double> b_haq);
RcppExport SEXP iviRA_sim_utility_wailooC(SEXP simSEXP, SEXP idSEXP, SEXP ageSEXP, SEXP disease_durationSEXP, SEXP haq0SEXP, SEXP maleSEXP, SEXP prev_dmardsSEXP, SEXP haqSEXP, SEXP b_intSEXP, SEXP b_ageSEXP, SEXP b_disease_durationSEXP, SEXP b_haq0SEXP, SEXP b_maleSEXP, SEXP b_prev_dmardsSEXP, SEXP b_haqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type sim(simSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type id(idSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type disease_duration(disease_durationSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type male(maleSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type prev_dmards(prev_dmardsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_int(b_intSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_age(b_ageSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_disease_duration(b_disease_durationSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_haq0(b_haq0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_male(b_maleSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_prev_dmards(b_prev_dmardsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_haq(b_haqSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_utility_wailooC(sim, id, age, disease_duration, haq0, male, prev_dmards, haq, b_int, b_age, b_disease_duration, b_haq0, b_male, b_prev_dmards, b_haq));
    return rcpp_result_gen;
END_RCPP
}
// treat_costC
List treat_costC(std::vector<int> therapy, std::vector<int> therapy_cycle, std::vector<double> id, std::vector<double> weight, double cycle_length, std::vector<double> ann_infusion_cost, std::vector<double> ann_rx_cost, std::vector<double> init_infusion_cost, std::vector<double> init_rx_cost, std::vector<int> weight_based, std::vector<double> ann_wgt_slope, std::vector<double> init_wgt_slope, std::vector<double> ann_util, std::vector<double> init_util, std::vector<double> strength, std::vector<double> price, int cdmards, int tcz, int tczmtx);
RcppExport SEXP iviRA_treat_costC(SEXP therapySEXP, SEXP therapy_cycleSEXP, SEXP idSEXP, SEXP weightSEXP, SEXP cycle_lengthSEXP, SEXP ann_infusion_costSEXP, SEXP ann_rx_costSEXP, SEXP init_infusion_costSEXP, SEXP init_rx_costSEXP, SEXP weight_basedSEXP, SEXP ann_wgt_slopeSEXP, SEXP init_wgt_slopeSEXP, SEXP ann_utilSEXP, SEXP init_utilSEXP, SEXP strengthSEXP, SEXP priceSEXP, SEXP cdmardsSEXP, SEXP tczSEXP, SEXP tczmtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type therapy(therapySEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type therapy_cycle(therapy_cycleSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type id(idSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ann_infusion_cost(ann_infusion_costSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ann_rx_cost(ann_rx_costSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type init_infusion_cost(init_infusion_costSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type init_rx_cost(init_rx_costSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type weight_based(weight_basedSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ann_wgt_slope(ann_wgt_slopeSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type init_wgt_slope(init_wgt_slopeSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ann_util(ann_utilSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type init_util(init_utilSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type strength(strengthSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type price(priceSEXP);
    Rcpp::traits::input_parameter< int >::type cdmards(cdmardsSEXP);
    Rcpp::traits::input_parameter< int >::type tcz(tczSEXP);
    Rcpp::traits::input_parameter< int >::type tczmtx(tczmtxSEXP);
    rcpp_result_gen = Rcpp::wrap(treat_costC(therapy, therapy_cycle, id, weight, cycle_length, ann_infusion_cost, ann_rx_cost, init_infusion_cost, init_rx_cost, weight_based, ann_wgt_slope, init_wgt_slope, ann_util, init_util, strength, price, cdmards, tcz, tczmtx));
    return rcpp_result_gen;
END_RCPP
}
// hosp_costC
std::vector<double> hosp_costC(std::vector<double>& haq, std::vector<double>& yrlen, std::vector<int>& sim, arma::mat& unit_cost_mat, arma::mat& hosp_days_mat);
RcppExport SEXP iviRA_hosp_costC(SEXP haqSEXP, SEXP yrlenSEXP, SEXP simSEXP, SEXP unit_cost_matSEXP, SEXP hosp_days_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type yrlen(yrlenSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type sim(simSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type unit_cost_mat(unit_cost_matSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type hosp_days_mat(hosp_days_matSEXP);
    rcpp_result_gen = Rcpp::wrap(hosp_costC(haq, yrlen, sim, unit_cost_mat, hosp_days_mat));
    return rcpp_result_gen;
END_RCPP
}
// prod_lossC
std::vector<double> prod_lossC(std::vector<double>& haq, std::vector<double>& yrlen, std::vector<int>& sim, std::vector<double> beta);
RcppExport SEXP iviRA_prod_lossC(SEXP haqSEXP, SEXP yrlenSEXP, SEXP simSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type yrlen(yrlenSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type sim(simSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(prod_lossC(haq, yrlen, sim, beta));
    return rcpp_result_gen;
END_RCPP
}
// si_costC
std::vector<double> si_costC(std::vector<double> si, std::vector<double>& yrlen, std::vector<int>& sim, std::vector<double> cost);
RcppExport SEXP iviRA_si_costC(SEXP siSEXP, SEXP yrlenSEXP, SEXP simSEXP, SEXP costSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type si(siSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type yrlen(yrlenSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type sim(simSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cost(costSEXP);
    rcpp_result_gen = Rcpp::wrap(si_costC(si, yrlen, sim, cost));
    return rcpp_result_gen;
END_RCPP
}
// mgmt_costC
std::vector<double> mgmt_costC(std::vector<double>& yrlen, std::vector<int>& sim, std::vector<double>& cost);
RcppExport SEXP iviRA_mgmt_costC(SEXP yrlenSEXP, SEXP simSEXP, SEXP costSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type yrlen(yrlenSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type sim(simSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type cost(costSEXP);
    rcpp_result_gen = Rcpp::wrap(mgmt_costC(yrlen, sim, cost));
    return rcpp_result_gen;
END_RCPP
}
// qalysC
std::vector<double> qalysC(std::vector<double>& utility, std::vector<double>& yrlen, std::vector<int>& sim, std::vector<int>& si, std::vector<double>& si_ul);
RcppExport SEXP iviRA_qalysC(SEXP utilitySEXP, SEXP yrlenSEXP, SEXP simSEXP, SEXP siSEXP, SEXP si_ulSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type utility(utilitySEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type yrlen(yrlenSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type sim(simSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type si(siSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type si_ul(si_ulSEXP);
    rcpp_result_gen = Rcpp::wrap(qalysC(utility, yrlen, sim, si, si_ul));
    return rcpp_result_gen;
END_RCPP
}
// ologit_probC
arma::rowvec ologit_probC(arma::rowvec x, arma::rowvec beta, arma::rowvec cut);
RcppExport SEXP iviRA_ologit_probC(SEXP xSEXP, SEXP betaSEXP, SEXP cutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type cut(cutSEXP);
    rcpp_result_gen = Rcpp::wrap(ologit_probC(x, beta, cut));
    return rcpp_result_gen;
END_RCPP
}
// mlogit_probC
arma::rowvec mlogit_probC(arma::rowvec x, arma::mat beta);
RcppExport SEXP iviRA_mlogit_probC(SEXP xSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mlogit_probC(x, beta));
    return rcpp_result_gen;
END_RCPP
}
// logistic
double logistic(double p);
RcppExport SEXP iviRA_logistic(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic(p));
    return rcpp_result_gen;
END_RCPP
}
// newprobC
double newprobC(arma::rowvec x, arma::rowvec logor, double logit_baseprob);
RcppExport SEXP iviRA_newprobC(SEXP xSEXP, SEXP logorSEXP, SEXP logit_baseprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type logor(logorSEXP);
    Rcpp::traits::input_parameter< double >::type logit_baseprob(logit_baseprobSEXP);
    rcpp_result_gen = Rcpp::wrap(newprobC(x, logor, logit_baseprob));
    return rcpp_result_gen;
END_RCPP
}
// update_qxC
void update_qxC(double baseline_haq, double current_haq, double& qx, double cycle_length, double month, arma::rowvec loghr_vec);
RcppExport SEXP iviRA_update_qxC(SEXP baseline_haqSEXP, SEXP current_haqSEXP, SEXP qxSEXP, SEXP cycle_lengthSEXP, SEXP monthSEXP, SEXP loghr_vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type baseline_haq(baseline_haqSEXP);
    Rcpp::traits::input_parameter< double >::type current_haq(current_haqSEXP);
    Rcpp::traits::input_parameter< double& >::type qx(qxSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type month(monthSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loghr_vec(loghr_vecSEXP);
    update_qxC(baseline_haq, current_haq, qx, cycle_length, month, loghr_vec);
    return R_NilValue;
END_RCPP
}
// mortprobC
double mortprobC(int age, int male, arma::mat lifetable_male, arma::mat lifetable_female, arma::rowvec x, arma::rowvec logor, double haq0, double haq, double cycle_length, double month, arma::rowvec loghr_vec);
RcppExport SEXP iviRA_mortprobC(SEXP ageSEXP, SEXP maleSEXP, SEXP lifetable_maleSEXP, SEXP lifetable_femaleSEXP, SEXP xSEXP, SEXP logorSEXP, SEXP haq0SEXP, SEXP haqSEXP, SEXP cycle_lengthSEXP, SEXP monthSEXP, SEXP loghr_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< int >::type male(maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_male(lifetable_maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_female(lifetable_femaleSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type logor(logorSEXP);
    Rcpp::traits::input_parameter< double >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< double >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type month(monthSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loghr_vec(loghr_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(mortprobC(age, male, lifetable_male, lifetable_female, x, logor, haq0, haq, cycle_length, month, loghr_vec));
    return rcpp_result_gen;
END_RCPP
}
// sample_deathC
int sample_deathC(int age, int male, arma::mat lifetable_male, arma::mat lifetable_female, arma::rowvec x, arma::rowvec logor, double haq0, double haq, double cycle_length, double month, arma::rowvec loghr_vec);
RcppExport SEXP iviRA_sample_deathC(SEXP ageSEXP, SEXP maleSEXP, SEXP lifetable_maleSEXP, SEXP lifetable_femaleSEXP, SEXP xSEXP, SEXP logorSEXP, SEXP haq0SEXP, SEXP haqSEXP, SEXP cycle_lengthSEXP, SEXP monthSEXP, SEXP loghr_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< int >::type male(maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_male(lifetable_maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_female(lifetable_femaleSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type logor(logorSEXP);
    Rcpp::traits::input_parameter< double >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< double >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type month(monthSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loghr_vec(loghr_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_deathC(age, male, lifetable_male, lifetable_female, x, logor, haq0, haq, cycle_length, month, loghr_vec));
    return rcpp_result_gen;
END_RCPP
}
// sample_survC
std::vector<double> sample_survC(int n, double age0, double male, arma::mat lifetable_male, arma::mat lifetable_female, arma::rowvec x, arma::rowvec logor, double haq0, std::vector<double> haq, double cycle_length, arma::rowvec loghr_vec);
RcppExport SEXP iviRA_sample_survC(SEXP nSEXP, SEXP age0SEXP, SEXP maleSEXP, SEXP lifetable_maleSEXP, SEXP lifetable_femaleSEXP, SEXP xSEXP, SEXP logorSEXP, SEXP haq0SEXP, SEXP haqSEXP, SEXP cycle_lengthSEXP, SEXP loghr_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type age0(age0SEXP);
    Rcpp::traits::input_parameter< double >::type male(maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_male(lifetable_maleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lifetable_female(lifetable_femaleSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type logor(logorSEXP);
    Rcpp::traits::input_parameter< double >::type haq0(haq0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type haq(haqSEXP);
    Rcpp::traits::input_parameter< double >::type cycle_length(cycle_lengthSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type loghr_vec(loghr_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_survC(n, age0, male, lifetable_male, lifetable_female, x, logor, haq0, haq, cycle_length, loghr_vec));
    return rcpp_result_gen;
END_RCPP
}
// rsurvC
double rsurvC(double location, double anc1, std::string dist, double anc2);
RcppExport SEXP iviRA_rsurvC(SEXP locationSEXP, SEXP anc1SEXP, SEXP distSEXP, SEXP anc2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type location(locationSEXP);
    Rcpp::traits::input_parameter< double >::type anc1(anc1SEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type anc2(anc2SEXP);
    rcpp_result_gen = Rcpp::wrap(rsurvC(location, anc1, dist, anc2));
    return rcpp_result_gen;
END_RCPP
}
// rbvcnormC
double rbvcnormC(double& x, double& y_mean, double& x_mean, double& y_var, double& x_var, double& cor);
RcppExport SEXP iviRA_rbvcnormC(SEXP xSEXP, SEXP y_meanSEXP, SEXP x_meanSEXP, SEXP y_varSEXP, SEXP x_varSEXP, SEXP corSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double& >::type y_mean(y_meanSEXP);
    Rcpp::traits::input_parameter< double& >::type x_mean(x_meanSEXP);
    Rcpp::traits::input_parameter< double& >::type y_var(y_varSEXP);
    Rcpp::traits::input_parameter< double& >::type x_var(x_varSEXP);
    Rcpp::traits::input_parameter< double& >::type cor(corSEXP);
    rcpp_result_gen = Rcpp::wrap(rbvcnormC(x, y_mean, x_mean, y_var, x_var, cor));
    return rcpp_result_gen;
END_RCPP
}
// matrix_byrow
arma::mat matrix_byrow(arma::rowvec v, int nrow, int ncol);
RcppExport SEXP iviRA_matrix_byrow(SEXP vSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_byrow(v, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// matrix_bycol
arma::mat matrix_bycol(arma::rowvec v, int nrow, int ncol);
RcppExport SEXP iviRA_matrix_bycol(SEXP vSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_bycol(v, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"iviRA_test_itreat_haq", (DL_FUNC) &iviRA_test_itreat_haq, 11},
    {"iviRA_get_das28_cat", (DL_FUNC) &iviRA_get_das28_cat, 1},
    {"iviRA_get_sdai_cat", (DL_FUNC) &iviRA_get_sdai_cat, 1},
    {"iviRA_get_cdai_cat", (DL_FUNC) &iviRA_get_cdai_cat, 1},
    {"iviRA_test_itreat_switch", (DL_FUNC) &iviRA_test_itreat_switch, 15},
    {"iviRA_sim_ttd_eular", (DL_FUNC) &iviRA_sim_ttd_eular, 11},
    {"iviRA_sim_ttd_da", (DL_FUNC) &iviRA_sim_ttd_da, 15},
    {"iviRA_sim_mlogit_classC", (DL_FUNC) &iviRA_sim_mlogit_classC, 2},
    {"iviRA_sim_dhaq_class_lcgm1C", (DL_FUNC) &iviRA_sim_dhaq_class_lcgm1C, 3},
    {"iviRA_sim_dhaq_lcgm1C", (DL_FUNC) &iviRA_sim_dhaq_lcgm1C, 7},
    {"iviRA_sim_haqC", (DL_FUNC) &iviRA_sim_haqC, 60},
    {"iviRA_sim_utility_mixture1C", (DL_FUNC) &iviRA_sim_utility_mixture1C, 18},
    {"iviRA_sim_utility_mixtureC", (DL_FUNC) &iviRA_sim_utility_mixtureC, 25},
    {"iviRA_sim_utility_wailooC", (DL_FUNC) &iviRA_sim_utility_wailooC, 15},
    {"iviRA_treat_costC", (DL_FUNC) &iviRA_treat_costC, 19},
    {"iviRA_hosp_costC", (DL_FUNC) &iviRA_hosp_costC, 5},
    {"iviRA_prod_lossC", (DL_FUNC) &iviRA_prod_lossC, 4},
    {"iviRA_si_costC", (DL_FUNC) &iviRA_si_costC, 4},
    {"iviRA_mgmt_costC", (DL_FUNC) &iviRA_mgmt_costC, 3},
    {"iviRA_qalysC", (DL_FUNC) &iviRA_qalysC, 5},
    {"iviRA_ologit_probC", (DL_FUNC) &iviRA_ologit_probC, 3},
    {"iviRA_mlogit_probC", (DL_FUNC) &iviRA_mlogit_probC, 2},
    {"iviRA_logistic", (DL_FUNC) &iviRA_logistic, 1},
    {"iviRA_newprobC", (DL_FUNC) &iviRA_newprobC, 3},
    {"iviRA_update_qxC", (DL_FUNC) &iviRA_update_qxC, 6},
    {"iviRA_mortprobC", (DL_FUNC) &iviRA_mortprobC, 11},
    {"iviRA_sample_deathC", (DL_FUNC) &iviRA_sample_deathC, 11},
    {"iviRA_sample_survC", (DL_FUNC) &iviRA_sample_survC, 11},
    {"iviRA_rsurvC", (DL_FUNC) &iviRA_rsurvC, 4},
    {"iviRA_rbvcnormC", (DL_FUNC) &iviRA_rbvcnormC, 6},
    {"iviRA_matrix_byrow", (DL_FUNC) &iviRA_matrix_byrow, 3},
    {"iviRA_matrix_bycol", (DL_FUNC) &iviRA_matrix_bycol, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_iviRA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
